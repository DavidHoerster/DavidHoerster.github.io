<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Musings from AgileDave</title>
    <link>https://dave.agileways.com/</link>
    <description>Recent content on Musings from AgileDave</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Dec 2023 17:46:43 -0500</lastBuildDate>
    <atom:link href="https://dave.agileways.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Actor Model in a C# World</title>
      <link>https://dave.agileways.com/posts/actor-model-dotnet/</link>
      <pubDate>Thu, 07 Dec 2023 17:46:43 -0500</pubDate>
      <guid>https://dave.agileways.com/posts/actor-model-dotnet/</guid>
      <description>This post is the first in an occasional series on building a distributed system using Akka.NET&#xA;The Actor Model is one of those approaches to system design that, at first, struck me as overly complex, but as I learned more about it, I discovered its simplicity and elegance, and its power. The Actor Model goes back to the 1970s with Carl Hewitt and has gained popularity over time for its ability to provide a simple approach to building highly scalable and concurrent systems.</description>
    </item>
  </channel>
</rss>
